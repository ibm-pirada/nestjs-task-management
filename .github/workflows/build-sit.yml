name: SIT - Build

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Repository branch or tag'
        required: true
  push:
    tags:
      - '*'

env:
  IMAGE_NAME: "nestjs-task-management"
  CONTAINER_REPOSITORY: "ghcr.io"
  
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    environment: sit
    steps:
      - name: Set Tag on Push
        if: github.event_name == 'push'
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
        working-directory: .

      - name: Set Tag on Workflow Dispatch
        if: github.event_name == 'workflow_dispatch'
        run: echo "RELEASE_VERSION=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
        working-directory: .

      - name: Check out code
        uses: actions/checkout@v3
        with:
          ref: ${{env.RELEASE_VERSION}}

      # - name: Quality Gate Check
      #   if: ${{ github.actor != 'dependabot[bot]' }}
      #   uses: corp-ais/quality-gate-action@main
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
      #   continue-on-error: true
     
      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
        
      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install
      
      - name: Unit test
        run: npm test
        continue-on-error: true

      - name: Comment Test Coverage
        if: ${{ github.event_name == 'pull_request' }}
        uses: artiomtr/jest-coverage-report-action@v2.0-rc.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: "Coverage Report - Upload Coverage Report"
        if: ${{ github.event_name != 'pull_request' }}
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report
          path: ./coverage/**/*.*

      - name: Set image id
        run: |
          IMAGE_ID=${{ env.CONTAINER_REPOSITORY }}/${{ github.repository_owner }}/$IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          echo "IMAGE_ID=$IMAGE_ID" >> $GITHUB_ENV

      - name: Build image
        run: |
          docker build \
            --build-arg "TOKEN=${{ secrets.REPO_ACCESS_TOKEN }}" \
            --tag="$IMAGE_ID:$RELEASE_VERSION" ./
            
      - name: Push image
        if: github.event_name != 'pull_request'
        run: |
          docker push $IMAGE_ID:$RELEASE_VERSION          
          
      # - name: Repository Dispatch
      #   uses: peter-evans/repository-dispatch@v2
      #   with:
      #     token: ${{ secrets.REPO_ACCESS_TOKEN }}
      #     repository: corp-ais/privilege-pipeline
      #     event-type: sit-${{ env.IMAGE_NAME }}
      #     client-payload: '{"ref": "${{ github.ref }}", "ref_name": "${{ env.RELEASE_VERSION }}", "sha": "${{ github.sha }}"}'
